﻿@model tester1.Models.GeocodeResult

@{
    ViewBag.Title = "Map";
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Map with Directions</title>
    <style>
        /* Thiết lập kích thước của bản đồ */
        #map {
            height: 800px;
            width: 100%;
        }
    </style>
</head>
<body>
    <h2>Map with Directions</h2>
    <!-- Tạo một thẻ div để chứa bản đồ -->
    <div id="map"></div>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDp8VBJ1CIihPbR-iTwR2q7jEkS03BXyOU&callback=initMap" async defer></script>

    <script>
        var map;
        var marker;
        var directionsService;
        var directionsRenderer; // Đã khai báo biến directionsRenderer ở phạm vi toàn cục

        function initMap() {
            map = new google.maps.Map(document.getElementById('map'), {
                zoom: 12
            });

            directionsRenderer = new google.maps.DirectionsRenderer(); // Khởi tạo directionsRenderer ở đây

            // Lấy vị trí hiện tại của người dùng
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    var userLocation = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };

                    var origin = new google.maps.LatLng(userLocation.lat, userLocation.lng);

                    // Hiển thị điểm xuất phát trên bản đồ
                    clearPreviousMarker();
                    marker = new google.maps.Marker({
                        position: origin,
                        map: map,
                        title: 'Your Location'
                    });

                    map.setCenter(userLocation);

                    var destinationAddress = "HCM Quận 1";
                    var geocoder = new google.maps.Geocoder();
                    geocoder.geocode({ 'address': destinationAddress }, function (results, status) {
                        if (status === 'OK') {
                            var destination = results[0].geometry.location;

                            var directionsService = new google.maps.DirectionsService();
                            calculateAndDisplayRoute(directionsService, directionsRenderer, origin, destination);

                            var stepSize = 1000;
                            var duration = 5000;
                            moveTowardsDestination(origin, destination, stepSize, duration);
                        } else {
                            console.log('Geocode for destination failed due to: ' + status);
                        }
                    });

                }, function () {
                    handleLocationError(true, infoWindow, map.getCenter());
                });
            } else {
                handleLocationError(false, infoWindow, map.getCenter());
            }
        }

        function handleLocationError(browserHasGeolocation, pos) {
            console.log('Error: The Geolocation service failed.');
        }

        function clearPreviousRoute() {
            directionsRenderer.setMap(null);
            directionsRenderer = new google.maps.DirectionsRenderer();
            directionsRenderer.setMap(map);
        }

        function clearPreviousMarker() {
            if (marker) {
                marker.setMap(null);
            }
        }

        function calculateAndDisplayRoute(directionsService, directionsRenderer, origin, destination) {
            directionsService.route({
                origin: origin,
                destination: destination,
                travelMode: 'DRIVING'
            }, function (response, status) {
                if (status === 'OK') {
                    directionsRenderer.setDirections(response);
                } else {
                    window.alert('Directions request failed due to ' + status);
                }
            });
        }

        function moveTowardsDestination(origin, destination, stepSize, duration) {
            var numSteps = duration / stepSize;
            var latStep = (destination.lat() - origin.lat()) / numSteps;
            var lngStep = (destination.lng() - origin.lng()) / numSteps;
            var currentStep = 0;

            var moveInterval = setInterval(function () {
                var newLat = origin.lat() + (latStep * currentStep);
                var newLng = origin.lng() + (lngStep * currentStep);
                var newPosition = new google.maps.LatLng(newLat, newLng);

                marker.setPosition(newPosition);
                map.panTo(newPosition);

                updateRouteAndRedraw(newPosition, destination);

                currentStep++;

                if (currentStep >= numSteps) {
                    clearInterval(moveInterval);
                }
            }, stepSize);
        }

        function updateRouteAndRedraw(origin, destination) {
            var directionsService = new google.maps.DirectionsService();
            var directionsRenderer = new google.maps.DirectionsRenderer();
            directionsRenderer.setMap(map);

            var request = {
                origin: origin,
                destination: destination,
                travelMode: 'DRIVING'
            };

            directionsService.route(request, function (response, status) {
                if (status == 'OK') {
                    directionsRenderer.setDirections(response);
                } else {
                    window.alert('Directions request failed due to ' + status);
                }
            });
        }

        clearPreviousRoute();

    </script>




    <!-- Bao gồm Google Maps JavaScript API -->
</body>
</html>